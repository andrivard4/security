#We can assume for now that the user is logged in
from Crypto.PublicKey import RSA

public_key = RSA.import_key(open("receiver.pem").read())
private_key = RSA.import_key(open("private.pem").read())
JSON_data = ""
input_name = ""
input_email = ""

#Get contact name and email
def getInput():
    print("getting input...")
#Validate email is an email address
def validateInput():
    print("validating input...")
#This one will be interesting...
#When the user creates the account, we create a public and private key with it
#The private key is then encrypted and stored in ~/.securedrop/private.pem
#That file is encrypted with a key generated by the user's password and salt
#We can assume the key is decrypted already from MS2 and stored as a global variable private_key
#Use that private key to decrypt the contact data (basically undo what was done in encryptData function in registration.py)
#once that is done we can parse the data as a JSON file (use python's json library)
#This all only needs to be done if the file exists yet... so check that first (the file should be at ~/.securedrop/contacts.log)
def decryptContacts():
    print("decrupting")

#Add a contact to the JSON data
def addContactsToFile():
    print("updating file...")

#Encrypt the contact info with the public key then write it to the contact file
#The public key will be stored in ~/.securedrop/user.log in a JSON format
#Use pythons JSON library to load that data into the public_key variable (be sure to use RSA.import_key() )
#Note, the public key is stored in the file as 'pub' and as hex, you must convert to bytes first
def encryptFile():
    print("encrypting file...")
