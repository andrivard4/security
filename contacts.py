
# We can assume for now that the user is logged in
# May have to change Cryptodome to Crypto depending
from Crypto.PublicKey import RSA
from Crypto.Random import get_random_bytes
from Crypto.Cipher import AES, PKCS1_OAEP
import sys
import os
import json

public_key = RSA.import_key(open("reciever.pem").read())
private_key = RSA.import_key(open("private.pem").read())
JSON_data = ""
input_name = ""
input_email = ""


# Get contact name and email
# Cassie, Pooja
def getInput():
    global input_name;    global input_email;
    input_name = input('Enter Contact Name:  ')
    input_email = input('Enter Contact Email:  ')


#Validate email is an email address
# Cassie, Pooja
def validateInput():
    global input_email;
    error = 1;

    # Make sure email has *@*.* where *s are replaced with any character
    while error == 1:
        print("validating input...")
        email_contents = input_email.split("@")
        if len(email_contents) != 2 or email_contents[1] == "" or email_contents[1][0] == "." :
            print("Email is invalid\n")
        elif len(email_contents[1].split(".")) != 2 or email_contents[1].split(".")[1] == ""  :
            print("Email is invalid\n")
        else:
            error = 0;

        if error == 1:
            getInput();


#This one will be interesting...
#When the user creates the account, we create a public and private key with it
#The private key is then encrypted and stored in ~/.securedrop/private.pem
#That file is encrypted with a key generated by the user's password and salt
#We can assume the key is decrypted already from MS2 and stored as a global variable private_key
#Use that private key to decrypt the contact data (basically undo what was done in the encrypt portion)
#once that is done we can parse the data as a JSON file (use python's json library)
#This all only needs to be done if the file exists yet... so check that first (the file should be at ~/.securedrop/contacts.log)
#New account, new private and public key
#encrypted and stored in ~/.securedrop/private.pem
#File then encrypted with key based on password and salt
#use private key to decrypt contact data, check if file is there
#Parse data as JSON
#add contact and encrypt


#########
# TBC
########
# Cassie, Pooja
def decryptContacts():
    global JSON_data

    print("decrypting")
    # Get contact file and see if it exists
    try:
        contactfile = open(os.path.expanduser("~") + "/.securedrop/contacts.log", "rb")
    except (OSError, IOError):
        print("No contact file")
        return
    if os.path.getsize( os.path.expanduser("~") + "/.securedrop/contacts.log" ) == 0:
        print("No content in file")
        return

    # If contact file exists and there is contnet, decrypt
    enc_session_key, nonce, tag, ciphertext = \
        [ contactfile.read(x) for x in (private_key.size_in_bytes(), 16, 16, -1) ]
    cipher_rsa = PKCS1_OAEP.new(private_key)
    session_key = cipher_rsa.decrypt(enc_session_key)
    cipher_aes = AES.new(session_key, AES.MODE_EAX, nonce)
    JSON_data = cipher_aes.decrypt_and_verify(ciphertext, tag).decode('utf-8')


#Add a contact to the JSON data
# Cassie, Pooja
def addContactsToFile():
    global input_name;    global input_email;
    global JSON_data

    print("Adding contact")
    print("1", JSON_data)
    if JSON_data:
        JSON_data = json.loads(JSON_data)
        print("3", JSON_data)
        for email in JSON_data:
            if input_email == email:
                print("This email already exists as a contact.\n")
                return
    else :
        JSON_data = json.loads('{"contacts":[]}')
    print("4", JSON_data)
    list = JSON_data['contacts']
    list.append({'name':input_name, 'email':input_email})
    JSON_data.update({'contacts': list})


#Encrypt the contact info with the public key then write it to the contact file
#The public key will be stored in the global variable public_key
#This works kinda like how task3 worked... Check the link I put in discord regarding that
# Cassie, Pooja
def encryptFile():
    global input_name;    global input_email;
    global JSON_data

    print("Encrypting file")
    if not os.path.exists(os.path.expanduser("~") + "/.securedrop"):
        os.mkdir(os.path.expanduser("~") + "/.securedrop")
    file_out = open(os.path.expanduser("~") + "/.securedrop/contacts.log", "wb")
    session_key = get_random_bytes(16)
    cipher_rsa = PKCS1_OAEP.new(public_key)
    enc_session_key = cipher_rsa.encrypt(session_key)
    cipher_aes = AES.new(session_key, AES.MODE_EAX)
    ciphertext, tag = cipher_aes.encrypt_and_digest(json.dumps(JSON_data, indent=2).encode('utf-8'))
    [ file_out.write(x) for x in (enc_session_key, cipher_aes.nonce, tag, ciphertext) ]
    file_out.close()

getInput()
validateInput()
decryptContacts()
addContactsToFile()
encryptFile()
